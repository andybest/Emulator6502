
  processor 6502

M_STR_BASE: equ $80
M_STR_LEN:  equ $10
M_HEX_RECORD_LEN: equ $11
M_HEX_RECORD_ADDR: equ $12
M_TEMP_ADDR: equ $14
M_CURRENT_ADDR: equ $16

start_monitor subroutine
  uarta_puts monitorInfoText

.monitor_loop:
  lda #$24                    ; Write the prompt ('$ ')
  uarta_putb
  lda #$20
  uarta_putb
  
  jsr monitor_get_string      ; Print the string with surrounding quotes
  jsr monitor_parse_command
  jmp .monitor_loop 
  rts

monitor_get_string subroutine
  ldy #$0

.check_char
  uarta_bytes_available
  beq .no_char                ; No character available
  
  uarta_getb                  ; Get byte from UART
  
  cmp #$0A                    ; Check if it's a newline
  beq .newline
  cmp #$08                    ; Check if it's a backspace
  beq .backspace

  tax
  cpy #$7F                    ; Make sure buffer doesn't overrun
  beq .check_char
  txa

.store_char
  sta M_STR_BASE,y
  iny
  uarta_putb
  jmp .check_char

.no_char
  jmp .check_char
    
.backspace
  cpy #$0
  beq .backspace_done
  dey                         ; Remove character if y > 0
  uarta_putb
.backspace_done
  jmp .check_char
    
.newline
  uarta_putb
  lda #$0
  sta M_STR_BASE,y      ; Add null terminator
  rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_parse_command
;
; Parses the command present at MONITOR_STR_BASE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_parse_command subroutine
  strlen M_STR_BASE
  sta M_STR_LEN

  ; If there are no characters, just return
  cmp #$0
  bne .parse_command
  rts

.parse_command
  lda M_STR_BASE

  ; Check if Intel hex (starts with :)
  cmp #':
  bne .not_iHex
  jsr monitor_parse_ihex
  rts

.not_iHex
  cmp #'?
  bne .not_help
  uarta_puts monitorHelpText
  rts

.not_help
  cmp #'a
  bne .not_address
  jsr monitor_current_address
  rts

.not_address
  cmp #'x
  bne .not_x_addr
  jsr monitor_examine_addr_range
  rts

.not_x_addr
  uarta_puts monitorUnknownText
  uarta_puts M_STR_BASE
  lda #$0A
  uarta_putb
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_parse_ihex
;
; Parses Intel HEX records
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_parse_ihex subroutine
  ; Parse Intel HEX format string

  ; Check that command is long enough to include record and checksum
  lda M_STR_LEN
  cmp #$0B      ; Check that it's at least 11 bytes long
  bcs .check_record_length
  jmp invalid_intel_hex

.check_record_length
  ; Get the number of data bytes in the record (01-02) and check that the input is
  ; long enough

  hex_byte_string_to_num M_STR_BASE + 1, invalid_intel_hex
  clc
  sta M_HEX_RECORD_LEN
  rol
  adc #$0B                      ; The record should be (data length << 1) + 11 bytes long
  cmp M_STR_LEN
  beq .check_type
  jmp invalid_intel_hex

.check_type
  hex_byte_string_to_num M_STR_BASE + 7, invalid_intel_hex
  beq .data_record

  cmp #01
  bne .unsupported_record
  rts                   ; Ignore EOF ($0) records

.unsupported_record
  jmp invalid_type_intel_hex

.data_record
  ; Get address of data record
  hex_byte_string_to_num M_STR_BASE + 3, invalid_intel_hex ; High byte
  sta M_HEX_RECORD_ADDR + 1
  hex_byte_string_to_num M_STR_BASE + 5, invalid_intel_hex ; Low byte
  sta M_HEX_RECORD_ADDR

  ; Check record integrity
  ldy #$0

.check_record_loop
  lda M_STR_BASE + 9,y
  jsr is_hex
  beq .record_char_is_hex
  jmp invalid_intel_hex

.record_char_is_hex
  iny
  cpy M_HEX_RECORD_LEN
  bne .check_record_loop

  ; Write bytes to memory
  ldy #$0
  ldx #$0

.data_write_loop
  lda M_STR_BASE + 9,x
  jsr hex_to_nibble
  clc
  rol
  rol
  rol
  rol
  sta $0
  inx
  lda M_STR_BASE + 9,x
  jsr hex_to_nibble
  clc
  ora $0
  sta (M_HEX_RECORD_ADDR),y    ; Store byte to address
  inx
  iny
  cpy M_HEX_RECORD_LEN
  bne .data_write_loop

  ; Done writing!
  rts


invalid_intel_hex:
  uarta_puts monitorIntelHexInvalid
  rts

invalid_type_intel_hex:
  uarta_puts monitorIntelHexInvalidType
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_change_address
; Changes the current address
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_current_address subroutine
  ; Check command length
  lda M_STR_LEN
  cmp #$5
  beq .length_valid
  jmp monitor_invalid_syntax
  
.length_valid
  hex_byte_string_to_num M_STR_BASE + 1, monitor_invalid_syntax
  sta M_TEMP_ADDR + 1
  hex_byte_string_to_num M_STR_BASE + 3, monitor_invalid_syntax
  sta M_CURRENT_ADDR
  lda M_TEMP_ADDR + 1
  sta M_CURRENT_ADDR + 1
  
  jsr monitor_print_address_contents
  rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_examine_addr_range
; Examines a range of addresses
; xXXXX.XX
; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_examine_addr_range subroutine
  ; Check command length
  lda M_STR_LEN
  cmp #$8
  beq .length_valid
  jmp monitor_invalid_syntax

.length_valid
  ; Get start address
  hex_byte_string_to_num M_STR_BASE + 1, monitor_invalid_syntax
  sta M_TEMP_ADDR + 1
  hex_byte_string_to_num M_STR_BASE + 3, monitor_invalid_syntax
  sta M_TEMP_ADDR

  ; Get length
  hex_byte_string_to_num M_STR_BASE + 6, monitor_invalid_syntax
  sta $6

  ldx #$0
  ldy #$0

.print_line
  ; Print start address
  lda M_TEMP_ADDR + 1
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb
  lda M_TEMP_ADDR
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb

  lda #':
  uarta_putb
  lda #$20
  uarta_putb

.print_char
  lda (M_TEMP_ADDR),y
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb
  lda #$20
  uarta_putb
  iny
  inx
  cpx $6                ; Have all bytes been printed?
  beq .print_done
  cpy #$10              ; Have all bytes on this line been printed?
  bne .print_char
  ldy #$0

  ; Increment stored address
  clc
  lda M_TEMP_ADDR
  adc #$10
  sta M_TEMP_ADDR
  lda M_TEMP_ADDR + 1
  adc #$0
  sta M_TEMP_ADDR + 1

  lda #$0A
  uarta_putb
  jmp .print_line

.print_done
  lda #$0A
  uarta_putb
  uarta_putb
  rts

monitor_print_address_contents subroutine
  ; Print address
  lda M_CURRENT_ADDR + 1
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb

  lda M_CURRENT_ADDR + 0
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb

  lda #':
  uarta_putb
  lda #$20
  uarta_putb

  ; Print data
  ldy #$0
  lda (M_CURRENT_ADDR),y
  jsr num_to_hex_string
  lda $0
  uarta_putb
  lda $1
  uarta_putb

  lda #$0A
  uarta_putb
  uarta_putb
  rts



monitor_invalid_syntax:
  uarta_puts monitorInvalidSyntaxText
  rts
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Strings
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

gotStrText: .byte "Got string: ", $0

monitorInfoText: .byte "Grif65 monitor v0.1 by Andy Best", $0A, $0
monitorLengthText: .byte "Length: ", $0
monitorUnknownText: .byte "Unknown command: ", $0
monitorInvalidSyntaxText: .byte "Invalid syntax", $0A, $0

monitorIntelHexInvalid: .byte "Invalid Intel Hex Record", $0A, $0
monitorIntelHexInvalidType: .byte "Invalid record type. Valid types are 00 (data) and 01 (EOF)", $0A, $0

monitorHelpText: 
  .byte $0A
  .byte "Commands:", $0A
  .byte "  ? - Help", $0A
  .byte "  a - Set address [aXXXX]", $0A
  .byte "  x - Examine address [xXXXX.CC] (XXXX- addr, CC- num bytes)", $0A 
  .byte $0A, "  Intel HEX Syntax:", $0A
  .byte "    :[record size][address][record type][bytes][checksum]", $0A
  .byte $0A, $0
