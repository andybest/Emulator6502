
  processor 6502

M_STR_BASE: equ $80
M_STR_LEN:  equ $10


start_monitor subroutine
  uarta_puts monitorInfoText

.monitor_loop:
  lda #$24                    ; Write the prompt ('$ ')
  uarta_putb
  lda #$20
  uarta_putb
  
  jsr monitor_get_string      ; Print the string with surrounding quotes
  jsr monitor_parse_command
  jmp .monitor_loop 
  rts

monitor_get_string subroutine
  ldy #$0

.check_char
  uarta_bytes_available
  beq .no_char                ; No character available
  
  uarta_getb                  ; Get byte from UART
  
  cmp #$0A                    ; Check if it's a newline
  beq .newline
  cmp #$08                    ; Check if it's a backspace
  beq .backspace

  tax
  cpy #$7F                    ; Make sure buffer doesn't overrun
  beq .check_char
  txa

.store_char
  sta M_STR_BASE,y
  iny
  uarta_putb
  jmp .check_char

.no_char
  jmp .check_char
    
.backspace
  cpy #$0
  beq .backspace_done
  dey                         ; Remove character if y > 0
  uarta_putb
.backspace_done
  jmp .check_char
    
.newline
  uarta_putb
  lda #$0
  sta M_STR_BASE,y      ; Add null terminator
  rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_parse_command
;
; Parses the command present at MONITOR_STR_BASE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_parse_command subroutine
  strlen M_STR_BASE
  sta M_STR_LEN

  lda M_STR_BASE

  ; Check if Intel hex (starts with :)
  cmp #':
  bne .not_iHex
  jsr monitor_parse_ihex
  rts

.not_iHex
  rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; monitor_parse_ihex
;
; Parses Intel HEX records
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

monitor_parse_ihex subroutine
  ; Parse Intel HEX format string

  ; Check that command is long enough to include record and checksum
  lda M_STR_LEN
  cmp #$0B      ; Check that it's at least 11 bytes long
  bcs .check_record_length
  uarta_puts monitorIntelHexInvalid
  rts

.check_record_length
  ; Get the number of data bytes in the record (01-02) and check that the input is
  ; long enough

  rts
  
gotStrText: .byte "Got string: ", $0

monitorInfoText: .byte "Grif65 monitor v0.1 by Andy Best", $0A, $0
monitorLengthText: .byte "Length: ", $0
monitorUnknownText: .byte "Unknown command: ", $0

monitorIntelHexInvalid: .byte "Invalid Intel Hex Record", $0A, $0

monitorHelpText: 
  .byte $0A
  .byte "Commands:", $0A
  .byte "  ? - Help", $0A
  .byte "  a - Set address [a XXXX]", $0A
  .byte $0A, $0
